<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="repository.mybatis.mapper.UserMapper">
	<cache />
	<sql id="UserBaseColumns">
		user_id AS userId,
		password AS password,
		name AS username,
		email AS email,
		birthDate AS birthDate,
		chronoType AS isMorningPerson
	</sql>
	
	<!-- 사용자 정보와 그에 연관된 Task 정보를 매핑 -->
    <resultMap id="UserWithTasks" type="User">
        <id property="userId" column="user_id"/>
        <result property="password" column="password"/>
        <result property="username" column="name"/>
        <result property="email" column="email"/>
        <result property="birthDate" column="birthDate"/>
        <result property="isMorningPerson" column="chronoType"/>

        <!-- Task 컬렉션 -->
        <!-- User과 task가 1:N이여서 collection 엘리먼트 사용 -->
        <collection property="tasks" ofType="Task">
            <result property="taskId" column="task_id"/>
            <result property="order" column="task_order"/>
            <result property="description" column="description"/>
            <result property="isCompleted" column="isCompleted"/>
        </collection>
    </resultMap>

    <!-- 사용자 ID로 사용자 정보 및 해당 Task 목록을 조회 -->
    <select id="selectUserWithTasks" parameterType="int" resultMap="UserWithTasks">
        SELECT u.user_id, u.password, u.name, u.email, u.birthDate, u.chronoType, 
               t.task_id, t.task_order, t.description, t.isCompleted
        FROM USERINFO u
        LEFT JOIN TASK t ON u.user_id = t.user_id
        WHERE u.user_id = #{userId}
    </select>

    <!-- 전체 사용자 정보와 해당 Task 목록을 조회 -->
    <select id="selectUserListWithTasks" resultMap="UserWithTasks">
        SELECT u.user_id, u.password, u.name, u.email, u.birthDate, u.chronoType, 
               t.task_id, t.task_order, t.description, t.isCompleted
        FROM USERINFO u
        LEFT JOIN TASK t ON u.user_id = t.user_id
        ORDER BY u.user_id
    </select>

	<insert id="createUser" parameterType="User">
		INSERT INTO USERINFO (user_id, password, name, email, birthDate, chronoType)
		VALUES (SEQUENCE_USERID.NEXTVAL, #{password}, #{username}, #{email}, #{birthDate}, #{isMorningPerson})
	</insert>
	
	<update id="updateUser" parameterType="User">
		UPDATE USERINFO 
		SET password = #{password}, name = #{username}, email = #{email}, birthDate = #{birthDate}, chronoType = #{isMorningPerson}
		WHERE user_id = #{userId}
	</update>
 
	<delete id="removeUser" parameterType="int">
		DELETE FROM USERINFO
		WHERE user_id = #{userId}
	</delete>
	
	<!-- 사용자 ID로 사용자 정보 검색 -->
	<select id="selectUser" parameterType="int" resultType="User">
		SELECT <include refid="UserBaseColumns" />
		FROM USERINFO
		WHERE user_id = #{userId}
	</select>

	<select id="selectUserByUsername" resultType="User">
    	SELECT <include refid="UserBaseColumns" /> 
    	FROM USERINFO WHERE name = #{username}
	</select>
	
	<!-- 전체 사용자 정보 목록 검색 -->
	<select id="selectUserList" resultType="User">
		SELECT <include refid="UserBaseColumns" />
		FROM USERINFO
		ORDER BY user_id
	</select>
	
	<!-- 주어진 사용자 ID에 해당하는 사용자가 존재하는지 검사  -->
	<select id="existingUser" parameterType="int" resultType="int">
    	SELECT COUNT(*)
    	FROM USERINFO
    	WHERE user_id = #{userId}
	</select>
</mapper>